#include "PropertyManager.h"

void PropertyManager::registerProperty(Property & property)
{
	PropertyManager::properties.push_back((&property));
}

Property &PropertyManager::getPropertyByName(const std::string& name)
{
	auto index = PropertyManager::properties.begin();
	int c = 0;
	bool found = false;
	for (property_list_type::iterator it = PropertyManager::properties.begin(); it != PropertyManager::properties.end(); it++) {

		if (name.compare(PropertyManager::properties[c]->p_name.c_str()) == 0) {
			return *PropertyManager::properties[c];
		}
		index++;
		c++;
	}
}

bool PropertyManager::exist(const std::string & name)
{
	auto index = PropertyManager::properties.begin();
	int c = 0;
	bool found = false;
	for (property_list_type::iterator it = PropertyManager::properties.begin(); it != PropertyManager::properties.end(); it++) {
		if (std::strcmp(name.c_str(), PropertyManager::properties[c]->p_name.c_str()) == 0) {
			return true;
		}
		index++;
		c++;
	}
	return false;
}

void PropertyManager::unregisterPropertyByName(std::string& name)
{
	auto index = PropertyManager::properties.begin();
	int c = 0;
	bool found = false;
	for (property_list_type::iterator it = PropertyManager::properties.begin(); it != PropertyManager::properties.end(); it++) {
		if (name.compare(PropertyManager::properties[c]->p_name)) {
			found = true;
			break;
		}
		index++;
		c++;
	}
	if (found)
		PropertyManager::properties.erase(index);
}