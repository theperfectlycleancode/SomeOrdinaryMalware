#pragma once
#include "CommonIncludes.h"

class Property // Base property for unknowntypedef support
{
public:
	Property(const std::string & name) : p_name(name) {} // Base property constructor
	std::string p_name; // Base property name for faster searching in lists
	virtual ~Property() {} // Virtual destructor
};

template<typename T>
class CProperty : public Property  // The property class is used to store values globally.
{
private:
	std::string propertyName; // The properties name is stored here.
	T propertyValue; // The propertiesValue is stored here.
	bool isPropertyProtected; // The properties protection state.
public:
	CProperty(const std::string& name, const T &value) : // Properties constructor: (Name, Value, ProtectedState).
		Property(name), // This is setting the base properties name.
		propertyValue(value), // This is setting the properties value.
		propertyName(name), // This is setting the properties name.
		isPropertyProtected(false) {} // This is setting the properties protection state.

	CProperty(const std::string& name, const T &value, bool isProtected) : // Properties constructor: (Name, Value, ProtectedState).
		Property(name), // This is setting the base properties name.
		propertyValue(value), // This is setting the properties value.
		propertyName(name), // This is setting the properties name.
		isPropertyProtected(isProtected) {} // This is setting the properties protection state.
	std::string &getName() {
		return propertyName;
	}

	T &getValue() // Return the properties value.
	{
		return propertyValue; // Returning the properties value.
	}

	bool setValue(T &value) // Overwrites the properties value.
	{
		if (isPropertyProtected) // Checking if the property is protected.
			return false; // Canceling the overwrite for the value, because the property is protected.
		propertyValue = value; // Overwriting the properties value.
		return true;
	}
};

typedef std::vector<Property *> property_list_type;