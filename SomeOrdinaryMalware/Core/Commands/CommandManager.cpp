#include "CommandManager.h"


CommandManager::CommandManager()
{
}


CommandManager::~CommandManager()
{
}

void CommandManager::inputCommand(Command & cmd)
{
	CommandManager::incomingCommands.push_back((&cmd));
}

void CommandManager::outputCommand(Command & cmd)
{
	CommandManager::outgoingCommands.push_back((&cmd));
}

void CommandManager::logCommand(Command & cmd)
{
	CommandManager::executedCommands.push_back((&cmd));
}

void CommandManager::processCommands()
{

	static bool update = true;
	if (update) {
		update = false;
		processTimer.reset();

		{
			static int updateCount = 0;

			auto index = CommandManager::incomingCommands.begin();
			int c = 0;
			for (std::vector<Command *>::iterator it = CommandManager::incomingCommands.begin(); it != CommandManager::incomingCommands.end(); it++) {
				if (CommandManager::incomingCommands[c] != nullptr)
					CommandManager::incomingCommands[c]->run();
				c++;
			}

			updateCount++;
		}
	}
	else if (processTimer.elapsed() > 10) {
		update = true;
	}



}
